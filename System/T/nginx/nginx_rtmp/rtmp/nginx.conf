worker_processes  1;
error_log  /data/logs/nginx/nginx_error.log  error;
#error_log  /data/logs/nginx/nginx_error.log   debug;
pid   /usr/local/nginx/logs/nginx.pid;

worker_rlimit_nofile 65535;

events {
  use epoll;
  worker_connections  65535;
}

rtmp {
  server {
    listen 1935;
    chunk_size 4000;
    # TV mode: one publisher, many subscribers
    application mytv {
      # enable live streaming
      live on;
      # record first 1K of stream
      record all;
      record_path /tmp/av;
      record_max_size 1K;
      # append current timestamp to each flv
      record_unique on;
      # publish only from 192.168.0.102
      allow publish all;
      #deny publish all;
      allow play all;
    }
    # Transcoding (ffmpeg needed)
    application big {
      live on;
      # On every pusblished stream run this command (ffmpeg)
      # with substitutions: $app/${app}, $name/${name} for application & stream name.
      #
      # This ffmpeg call receives stream from this application &
      # reduces the resolution down to 32x32. The stream is the published to
      # 'small' application (see below) under the same name.
      #
      # ffmpeg can do anything with the stream like video/audio
      # transcoding, resizing, altering container/codec params etc
      #
      # Multiple exec lines can be specified.
      exec /usr/bin/ffmpeg -i rtmp://192.168.0.102:1935/big -c copy /tmp/dump.mp4
      #exec ffmpeg -re -i rtmp://192.168.0.102:1935/$app/$name -vcodec flv -acodec copy -s 32x32
                  -f flv rtmp://192.168.0.102:1935/small/${name};
    }

    application small {
      live on;
      # Video with reduced resolution comes here from ffmpeg
    }

    application webcam {
      live on;

      # Stream from local webcam
      exec_static ffmpeg -f video4linux2 -i /dev/video0 -c:v libx264 -an
                         -f flv rtmp://192.168.0.102:1935/webcam/mystream;
    }


    # HLS

    # For HLS to work please create a directory in tmpfs (/tmp/hls here)
    # for the fragments. The directory contents is served via HTTP (see
    # http{} section in config)
    #
    # Incoming stream must be in H264/AAC. For iPhones use baseline H264
    # profile (see ffmpeg example).
    # This example creates RTMP stream from movie ready for HLS:
    #
    # ffmpeg -loglevel verbose -re -i movie.avi  -vcodec libx264
    #    -vprofile baseline -acodec libmp3lame -ar 44100 -ac 1
    #    -f flv rtmp://192.168.0.102:1935/hls/movie
    #
    # If you need to transcode live stream use 'exec' feature.
    #
    application hls {
      live on;
      hls on;
      hls_path /tmp/hls;
    }

    # MPEG-DASH is similar to HLS

    application dash {
      live on;
      dash on;
      dash_path /tmp/dash;
    }
  }
}

http {
  include       mime.types;
  default_type  application/octet-stream;
  
  server_names_hash_bucket_size 128;
  client_header_buffer_size 32k;
  large_client_header_buffers 4 32k;
  client_max_body_size 100m;
      
  client_body_buffer_size 256k;
  client_header_timeout 3m;
  client_body_timeout 3m;
  send_timeout 3m;  
  
  sendfile        on;
  tcp_nopush on;
  keepalive_timeout  65;
  tcp_nodelay on;
  
  server_tokens off;

  fastcgi_connect_timeout 300;
  fastcgi_send_timeout 300;
  fastcgi_read_timeout 300;
  fastcgi_buffer_size 64k;
  fastcgi_buffers 4 64k;
  fastcgi_busy_buffers_size 128k;
  fastcgi_temp_file_write_size 128k;
  
  proxy_connect_timeout   60;   
  proxy_send_timeout      60;   
  proxy_read_timeout      60;   
  proxy_buffer_size       64k;   
  proxy_buffers           4 64k;   
  proxy_busy_buffers_size 128k;   
  proxy_temp_file_write_size 128k; 
# proxy_cache_path /data/tmp/nginx/cache/one  levels=1:2   keys_zone=one:10m max_size=2g;
# proxy_cache_key "$host$request_uri";

  gzip  on; 
  gzip_min_length  1k;
  gzip_buffers     4 16k;
  gzip_http_version 1.0;
  gzip_comp_level 2;
  gzip_types       text/plain application/x-javascript text/css application/xml;
  gzip_vary on;
  
  log_format  access  '$remote_addr $upstream_addr - $remote_user [$time_local] "$request" '
    '$status $body_bytes_sent "$http_referer"  $scheme://$host$request_uri'
    '"$http_user_agent" $http_x_forwarded_for'; 
  
  
# server {
#   listen 80;
#   server_name _;
#   return 500;
# }
  upstream tornadoes {
    server 127.0.0.1:8000;
    server 127.0.0.1:8001;
    server 127.0.0.1:8002;
    server 127.0.0.1:8003;
  }
  
  include vhost/*.conf; 
}


