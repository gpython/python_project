worker_processes  1;
error_log  /data/logs/nginx/nginx_error.log  error;
#error_log  /data/logs/nginx/nginx_error.log   debug;
pid   /usr/local/nginx/logs/nginx.pid;

worker_rlimit_nofile 65535;

events {
  use epoll;
  worker_connections  65535;
}



http {
  include       mime.types;
  default_type  application/octet-stream;
  
  server_names_hash_bucket_size 128;
  client_header_buffer_size 32k;
  large_client_header_buffers 4 32k;
  client_max_body_size 100m;
      
  client_body_buffer_size 256k;
  client_header_timeout 3m;
  client_body_timeout 3m;
  send_timeout 3m;  
  
  sendfile        on;
  tcp_nopush on;
  keepalive_timeout  65;
  tcp_nodelay on;
  
  server_tokens off;

  fastcgi_connect_timeout 300;
  fastcgi_send_timeout 300;
  fastcgi_read_timeout 300;
  fastcgi_buffer_size 64k;
  fastcgi_buffers 4 64k;
  fastcgi_busy_buffers_size 128k;
  fastcgi_temp_file_write_size 128k;
  
  proxy_connect_timeout   60;   
  proxy_send_timeout      60;   
  proxy_read_timeout      60;   
  proxy_buffer_size       64k;   
  proxy_buffers           4 64k;   
  proxy_busy_buffers_size 128k;   
  proxy_temp_file_write_size 128k; 
# proxy_cache_path /data/tmp/nginx/cache/one  levels=1:2   keys_zone=one:10m max_size=2g;
# proxy_cache_key "$host$request_uri";

  gzip  on; 
  gzip_min_length  1k;
  gzip_buffers     4 16k;
  gzip_http_version 1.0;
  gzip_comp_level 2;
  gzip_types       text/plain application/x-javascript text/css application/xml;
  gzip_vary on;
  
  log_format  access  '$remote_addr $upstream_addr - $remote_user [$time_local] "$request" '
    '$status $body_bytes_sent "$http_referer"  $scheme://$host$request_uri'
    '"$http_user_agent" $http_x_forwarded_for'; 
  
  
# server {
#   listen 80;
#   server_name _;
#   return 500;
# }
  upstream tornadoes {
    server 127.0.0.1:8000;
    server 127.0.0.1:8001;
    server 127.0.0.1:8002;
    server 127.0.0.1:8003;
  }
  
  include vhost/*.conf; 
}


rtmp {                        #RTMP服务
  server {
    listen 1935;              #//服务端口 
    chunk_size 4096;          #//数据传输块的大小

    application vod {
      play /data/video/rtmp/vod;    #//视频文件存放位置。
    }
    
    application live {        #RTMP直播字段
      live on;
      record all;
      record_path /data/video/live/vod;
      record_max_size 64K;

      record_unique on;
      allow publish all; #127.0.0.1;
      allow play all;
      ffmpeg -i rtmp://server/live/streamName -c copy dump.flv
    }
    application big {
      live on;

  # On every pusblished stream run this command (ffmpeg)
  #   # with substitutions: $app/${app}, $name/${name} for application & stream name.
  #     #
  #       # This ffmpeg call receives stream from this application &
  #         # reduces the resolution down to 32x32. The stream is the published to
  #           # 'small' application (see below) under the same name.
  #             #
  #               # ffmpeg can do anything with the stream like video/audio
  #                 # transcoding, resizing, altering container/codec params etc
  #                   #
  #                     # Multiple exec lines can be specified.
  #
      exec ffmpeg -re -i rtmp://localhost:1935/$app/$name -vcodec flv -acodec copy -s 32x32 -f flv rtmp://192.168.0.102:1935/small/${name};
    }
    application hls {        #HLS直播字段
      live on;
      hls on;
      hls_path /data/video/hls/vod;
      hls_nested on;
      hls_fragment 2s;
      hls_playlist_length 6s;

      hls_variant _hi  BANDWIDTH=640000;
    }

  }
}
